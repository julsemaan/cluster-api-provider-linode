---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caddy-config
data:
  caddyfile: |
    :8080 {
      respond /healthz 200

      respond /hello <<TXT
      Hello from {$MY_K8S_HOST}
      TXT 200
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: caddy
  labels:
    k8s-app: caddy
spec:
  selector:
    matchLabels:
      name: caddy
  template:
    metadata:
      labels:
        name: caddy
    spec:
      containers:
        - name: caddy
          image: caddy:2.7
          env:
            - name: MY_K8S_HOST
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - name: http
              containerPort: 8080
              hostPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: caddyfile-config-volume
              mountPath: /etc/caddy/Caddyfile
              subPath: caddyfile
      volumes:
        - name: caddyfile-config-volume
          configMap:
            name: caddy-config
---
apiVersion: v1
kind: Service
metadata:
  name: caddy
spec:
  selector:
    name: caddy
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
kind: NgrokModuleSet
apiVersion: ingress.k8s.ngrok.com/v1alpha1
metadata:
  name: ngrok-module-set
modules:
  headers:
    request:
      add:
        is-ngrok: "1"
        country: "${conn.geo.country_code}"
      remove: ["referrer"]
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: caddy
  annotations:
    k8s.ngrok.com/modules: ngrok-module-set
spec:
  ingressClassName: ngrok
  rules:
    - host: akamai-gslb.ngrok.app
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: caddy
                port:
                  number: 8080
